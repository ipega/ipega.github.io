{
  "details": [
    "<p><strong>Objective:</strong> Design and implement a sample application named TalentHunt
<strong></br>Scenario Details:</strong>
As part of this application, HR Recruiter tries to find a good candidate for the employer.
Once the candidate is sourced, the profile need to be sent for evaluation. 
If the evaluation passed or failed, the candidate would be informed suitably through the recruiter team.
If the evaluation is a pass, hr team should be notified too to schedule interview.
Based on the interview evaluation, the candidate would be informed.
If the interview evaluation is good, the onboarding team should be notified also.
Onboarding team would check the joining date with the candidate provided candidate accepts the offer.
If candidate is not selected or selected candidate didnt join, talent hunt process would kick in again.
This is more or less high level requirement of Talent hunt process.
Let's discuss how to design this in pega.
<strong></br>Design:</strong>
Think about the application, do we need this application or functionality for one division of company or multiple division or for multiple unit.
Decide what would be your cases and data entities, who would be the end user.
Whats life cycle of cases. How to break them at stages and sub stages.
Which end users would be accessing the case. What would be their authorisation level.
You don't have to be adding every minute details but for starting this is enough.
After adding these details, we would see that we may be adding or updating these in future.
By seeing the above scenario, we can think of the following case
	Hire a Candidate
</br>Stages - *reference
</br>Create a Req
	</br>>> Hiring Manager submits Req details 
	</br>>> A Recruiter is assigned to this case
</br>Source the Profiles
	</br>>> Load the profiles from Profile Data table (data table would be created later point)
	</br>>> Screen the profiles
	</br>>> Notify the candidate if the profile selected
</br>Interview the Candidate ( We may go for a new case for this later )
	</br>>> Schedule an Interview 
	</br>>> Technical Round and HR Round (Manage by process)
Offer a Candidate
	</br>>> Negotiate with candidate
	</br>>> candidate feedback
Onboarding
	</br>>> Intimate the Hiring Department
	</br>>> Resolve the case
</br>Alternate stages
	</br>>> Not Suitable Candidate
</br>Data entities:
	</br>Profile Data Table - This would store the sourced candidate and their interview status
</br>We have to implement security , configure user interface for the end user.
</br><strong>Implementation:</strong>
	</br>Use a Data page to fetch data from profile
</br>we need to configure the UI
	</br>Configuring UI is piece of cake (we are just using the UI to do the basic stuff)
	</br>We can have dynamic layout and add the text field, dropdown, radio, checkbox etc inside it.
</br>We need to have different access group for different end user
	</br>Once you open the end user, you can see that they are associated with TalentHunt:Administrators access group.
	</br>Save this access group as TalentHunt:Manager, TalentHunt:Recruiter, TalentHunt:Candidate access group.
	</br>Modify the operator (end user) to have appropriate access group. For e.g. Manager should have TalentHunt:Manager access group and Recruiter should have TalentHunt:Recruiter.
	
</br>We need to have different portal for different end user
	</br>Administrator >> should be having developer portal
	</br>Hiring Manager >> should be having pyCaseManager7 portal
	</br>Recruiter >> should be having pyCaseWorker portal
	</br>Candidate >> should be having pyCaseWorker portal
	</br>You can go to access group of individual operator and configure the portal.
	</br>All these portals are OOTB and we would customize them later point of time.
</br>The basics has been done and we are good to go ahead with the Hire a candidate case.
</br><strong>Step-1</strong>	Manager logins to the portal and starts this case with the following information
		</br>Hiring Position
		</br>Hiring Manager
		</br>Hiring Location
		</br>SkillSet
		</br>Once this information is submitted, the case would be sent to a Recruiter ( for now we have a Recruiter Operator)
</br><strong>Step-2</strong>	Recruiter logins to the portal and see the case is in the 'My Work'.
		</br>Recruiter clicks on the Case and submits the following details of candidate matching the skillset (recruiter need to do manuall Talent Hunt and find the candidate details)
			</br>Candidate Emailid
			</br>Candidate Phone
			</br>Candidate Name
			</br>Candidate skillset
		</br>This is a Grid presentation so Recruiter can submit one or more candidates. For now, we can have one candidate but to make it flexible, we should let the recruiter populate a PageList/page group property named SourcedCandidate.
</br><strong>Step-3</strong>	Recruiter submit the screen and it is routed back to Manager.
			</br>Manager logins to the Portal.
			</br>Open this case from My Work. 
			</br>Review the candidate and select a candidate with whom the interview process should be started.
			</br>Manager submits the screen.
			</br>The case is routed to Recruiter.
</br><strong>Step-4</strong>	Recruiter Opens the Case
			</br>Contact the candidate and schedule for the interview.
			</br>Contact manager to intimate Interviewer for the Candidate.
			</br>Recruiter submits the case. The case is routed to Interviewer. (We got one more enduser here, need to have an operator for now and its accessgroup and portal)
</br><strong>Step-5</strong>	Interviewer logs in the portal
			</br>Interviewer accepts the interview meeting.
			</br>Post Interview, Interviewer gives the candidate feedback.
			</br>Interviewer submits and the case is routed to Manager.
</br><strong>Step-6</strong>	Manager logins to Portal.
			</br>Manager open the case from My Work.
			</br>Managers reads the feedback and gives an approval or reject to follow up with this candidate.
			</br>Manager submits and the case is routed to Recruiter (if manager has rejected) or case is routed to onBoardingHr( if Manager has approved.)
</br><strong>Step-7</strong>	OnBoardingHr logins to Portal.
			</br>Open the case from My work.
			</br>Notify the Candidate about the decision.
			</br>OnBoardingHR notes candidate's decision about the offer.
			</br>OnBoardingHR submits the screen.
			</br>case would be routed to Manager (If candidate accepts) else Notify the Recruiter (if candidate rejects)
</br><strong>Step-8</strong>	Recruiter logins to screen.
			</br>if the case is assigned to the recruiter due to candidate denial or Manager's rejection, Recruiter would start from Step-2 and source next candidate.
</br><strong>Step-9</strong>	Manager logins to the portal
			</br>Manager Resolve the case.
	
</br><strong>Following Future requirements would be added in this tutorial. For now I can think of this but I am sure this would be a long list to keep me busy for couple of months.</strong>
</br>----Employer may want to select any third party vendor as a recruiter.
</br>----We may want to have more cases like OnBoarding, Interview, Feedback. This should enforce us to have new data entities like Feedback.
</br>----We may want to use external authentication so that any one in organization can use this application.
</br>----We may want to use mashup so that candidate can use the TalentHunt application without being having an operator id.
</br>----Substages will be groomed further to include process or smartspaes or calling other cases.
</br><strong>Reference - Stages</strong>
</br>Stages and substages are presented in this way
	</br>Stage1
	</br>>>substage1
	</br>>>substage2
</br>P.S.: This is a sample application which is designed in a very basic way. I tried to show case how you should start design and implementing things the moment you have some requirement.
</br>Going forward, I would be making it more scalable, flexible, will use many features of the Pega.
</br>If you want any improvement upon this submit a feedback by sending a mail to ipega.learning@gmail.com
	"
  ]
}

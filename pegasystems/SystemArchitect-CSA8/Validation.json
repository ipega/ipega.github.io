{
  "details": [
    "<p><strong>Validation</strong></br> Pega validates the properties of a clipboard page or a case in different way.</br> One is validating the properties while updating them with value.</br> This is done by edit validate rule. This can be defined in property rule itself.</br> The other one is validate. This can be called from a flow action or from other validate rules.</br> In edit validate rule, you can write java code.</br> </br> In an User view of Hire a candidate , you are displaying a candidate joining date which cannot be a past date.</br> You can add a edit validate rule (IsFuturedate) for this joining date property.</br> So if any past date is submitted for this joining date property, system would show errors on the screen.</br> </br> You use validate rules to compare a property against a condition when the user submits a form. </br> If the user enters a value that fails to meet the condition, the form displays an error when the form is submitted. </br> </br> Controls are another way you restrict users from entering or selecting invalid values on a form. </br> For example, when a form requires a date, using a calendar control ensures that users enter a date value. </br> If a user needs to enter free-form text such an address, you would use a text input control.</br> </br> You use edit validate rules with single value, value list, and value group properties to test for patterns. </br> For example, you can configure a zip code property to reference an edit validate rule that tests whether the entered value has five digits. </br> In another example, an email address can reference an edit rule to test whether the entered value contains an "at" (@) symbol. </br> If the submitted value is invalid, the field displays an error. </br> Edit validate rules run when the user exits a field if the harness rule is configured to support client-side validation. </br> Otherwise, edit validate rules are run when the user submits a form.</br> </br> By default, Pega Platform performs client-side validation.</br> </br> The other sort of validations you can do from an activity by using Obj-Validate method</br> </br> making a field required or conditionally required also part of a validation</br> </br> <strong>Configuring a required field</strong></br> You can configure required fields when working with views in the Case Designer or when working with sections in Dev Studio.</br> </br> In a view, select Required in the Options drop-down for a required field.</br> In a section, open the field's Properties panel. In the Required drop-down list, select Always so that the user must enter a value under any condition. </br> If you want to make the field required under specific conditions, select either Condition (expression) or Condition (when rule).</br> </br> Never and Always correspond to the Optional and Required settings respectively in App Studio and the Case Designer. </br> The conditional options can only be configured in a section.</br> </br> You set a field as required when you want to make sure users enter a value before they can continue.</br> </br> <strong>Editable settings</strong></br> You can use editable settings on controls to restrict the input values to valid formats. The settings are specific to the control type. </br> For example, you can specify the minimum and maximum of characters allowed in a text input control. </br> You can also specify that users cannot enter dates as text — users must select a date from a calendar icon control.</br> To ensure that an user always enters 20 characters in a field, You would use editable settings to set both the minimum and maximum number to 20 characters.</br> </br> Validate rules are often associated with processes. The association between validate rules and processes enables you to validate the property based on specific business logic. </br> For example, you can use a single property — in this case, a date type property — and separate the type of property from the business conditions that affect the acceptable values.</br> </br> You can also use validate rules in other areas of the case life cycle. For example, you can use a validate rule on a stage. </br> Use a validate rule to ensure users have entered the correct data or performed all the processes before the case can enter a specific stage. </br> </br> Validate rules enable you to use a single property when different values are required based on business logic</br> </br> Validating an input field with a validate rule is a two-step process. First, create and define a validate rule. </br> Then update the process to execute the validate rule when submitting a user view on an assignment step. </br> This is done by configuring the flow action rule Pega automatically creates when adding a Collect information step in your case life cycle. </br> Flow actions provide additional processing capabilities such as running data transforms and calling validation rules. </br> Flow actions can be accessed from the Process Modeler or from the Application Explorer under the Process category.</br> </br> You use App Studio to validate simple form validations that compare the value of a field to a constant value and return an error message if the condition is not met. </br> When you use App Studio to create simple form validations, App Studio creates the validate rule and applies the rule to the flow action that corresponds to the user view.</br> </br> You use Dev Studio to create more complex validations that require you to manually update the flow action properties panel.</br> </br> <strong>Validate data in App Studio</strong></br> An example of a value comparison is if a candidate join date is not future date, </br> then return an error message stating that the joining date must be a future date.</br> </br> To create a validation condition in App Studio:</br> </br> >>Select the step to which you want to apply the validation condition.</br> >>Click Configure view to edit the user view.</br> >>Select the Conditions tab to configure the business logic that defines the condition.</br> >>Under No validation conditions present, click +Add condition to make the condition entry fields available.</br> >>In the Message field, enter a message to tell users when the validation fails. In this example, joining date must not be blank.</br> >>To the right of When, from the Field drop-down, select the property or field to test. In this example, select joining date as the field to test.</br> >>From the Comparator drop-down, select the test to perform. In this example, select equal to.</br> >>Optional: In the Value field, provide a comparison value. Certain tests do not require a comparison value. </br> In this example, the selected comparison requires a value, so enter "".</br> >>Click Submit to complete the configuration of the validation condition.</br> >>Click Save to update the case type and prevent the user from submitting the form if the joining date is equal to zero ""</br> </br> <strong>Create the validate rule in dev studio</strong></br> In the App Studio, right-click the case type in which you want to create the validate rule.</br> >>Select Create > Process > Validate to open a Create Validate form.</br> >>Enter a specific name in the Label field. For example, enter Is Start Date in the Future for a rule that validates whether the start date for a new employee is in the future.</br> >>In the Context area, add the Apply to class and ruleset. Then, select Create and Open. The Application Explorer displays the Validate form.</br> >>In the Validate form, enter the property you want to test in the Property field. In the following example, the value for .</br> Candidate.StartDate tests when a user enters a date and submits the form.</br> >>In the Conditions header, click Add to create the validation conditions.</br> >>In the Validation conditions dialog, enter the following information.</br> </br> <table> <tr><th>Field</th>								<th>Information</th></tr> <tr><td>Select a function</td>					<td>[a datetime] is in the [past/future]</td></tr> <tr><td>If</td>									<td>.Candidate.StartDate is in the Past</td></tr> <tr><td>Message</td>								<td>Start date must be later than the current date</td></tr> </table> </br> >>In the dialog, click Submit.</br> The Validation form displays your updates as shown in the following example.</br> >>In the validate form, click Save to complete the configuration of the validate rule.</br> </br> <strong>Associating the validate rule with a flow action</strong></br> >>On the Workflow tab of the Case Designer, click the name of the process you wish to validate to open a contextual panel on the right side of the Case Designer.</br> >>Click Open process in the contextual panel on the right to open the flow rule.</br> >>Right-click the connector that contains the flow action you want to update and select Open Flow Action. The flow action form opens.</br> >>On the flow action form, open the Validation tab.</br> >>In the Validate field, select your validation rule IsStartDateInTheFuture.</br> >>Click Save.</br> When a user enters a date in the Start date field that is not a future date and submits the form, your error message is displayed.</br> </br> A validation condition which need some function call should be done in dev studio rather than in an app studio.</br> </br> To use an edit validate rule with a validate rule, open the validate rule. </br> In the Select a function field, select the function Validation of [Property Name] using [Edit Validate Name]. </br> In the Validation of field, enter the property you want to validate. </br> Then in the using field, select an edit validate rule.</br>"
  ]
}

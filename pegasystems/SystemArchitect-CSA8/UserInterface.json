{
  "details": [
    "<p><strong>Section rules</strong></br> </br> A section is the rule used in Pega to configure the contents of a user view.</br> </br> Users interact with an application and perform tasks through user forms. </br> </br> In Pega, you build user forms with sections. Sections group information and functionality by context and purpose. Inside a section, you organize UI elements with layouts. Layouts contain rows and columns, defining a set of cells. A cell can be empty or contain various fields and controls.</br> </br> When you create a view in the Dev Studio, you are using sections to build the view. By default, the fields in the section are organized into a layout that contains a single column. When you add an embedded field such as a field group (list), the list properties are organized into their own section.</br> </br> </br> Sections and dynamic layouts</br> Sections use dynamic layouts that arrange items in a flexible form, automatically adjusting to screen size. Section rules generally use two types of layouts: dynamic layouts and repeating layouts.</br> </br> </br> A dynamic layout is a general purpose layout used to a organize a single set of fields. Dynamic layouts support responsive behavior to support use on multiple devices (computer, tablet, phone). As the screen size changes, the layout shifts its contents to wrap content on-screen.</br> </br> A repeating layout is used to organize lists, tables, and other repeating structures. Repeating layouts reference a page list or page group, either by referencing a clipboard property or a data page. As the screen size changes, elements display or are hidden to maximize the value of the displayed content.</br> </br> </br> Design templates</br> You use design templates to configure section layouts. The templates provide a set of commonly used UI designs. Using templates makes it easy to add the UI elements to a section without having to manually configure the layouts. Dynamic layouts are often used in templates.</br> </br> Design templates allow you to apply a consistent structure to a form. You can change the structure by changing the template.</br> </br> Structurally, a section consists of one or more layouts and embedded sections. These sections enable you to logically group elements and reuse them in other layouts. </br> </br> The user interface (UI) is the user's view of the application. To be effective, a UI must meet the user's needs and be easy to use. A well-designed UI provides a better understanding of what the application delivers.</br> </br> An intent-driven UI shows users what they need to know to perform a task. </br> </br> Align the user view with the case life cycle to ensure the user interface is model-driven.</br> </br> A model-driven approach results in faster application development, and a contextually sensitive UI. Another benefit of the model-driven approach is a UI that can quickly change when business rules change.</br> </br> Minimize data elements to an optimal set that is critical to the task. </br> Focus on what users are trying to accomplish. </br> Be aware of where users are in the life cycle and the next best action. Users should not have to guess how to proceed while looking at a view.</br> Users are more comfortable and complete tasks faster when views are consistent within an application.</br> </br> Create patterns in language, layout, and design to help users complete their tasks.</br> Design consistency enables users to recognize similar tasks in other application views.</br> </br> The section is the fundamental UI rule in Pega applications. Section rules are created automatically when you create user views in the case life cycle. Sections are organized into layouts, which contain the fields that are presented to the user in the view.</br> </br> When creating a user interface, a section can be configured through a user view using Pega. However, certain configuration needs can only be satisfied by accessing and modifying the section rule directly. For example, adding more than one layout can only be done on a section rule. And if the section is not configured from the case life cycle, you need to create the section manually.</br> </br> In Dev Studio, you create sections from the Create menu, or by right-clicking the case type in the Application Explorer and selecting the User Interface category and the Section rule type. When you create a section, specify the following information:</br> </br> Label – Used to identify the purpose of the section. The label is used to generate an identifier for the record.</br> Class – The class to which the record is applied. The class determines the availability and re-usability of the section.</br> Ruleset and version – The ruleset and version that contains the record. Pega defaults to the highest unlocked application ruleset when you create a record.</br> You can also select Create Section using a Design Template. Use design templates to ensure that the application UI is organized consistently and to simplify the organization of the section and its maintenance. You can position the section contents by selecting a template and then arranging the contents within the columns defined by the template.</br> </br> In App Studio, you can change the design template when running a case by clicking Configure this view in the upper right corner of the form. In Dev Studio, you can change the design template on the Design tab of the section rule.</br> </br> If a design template does not provide the desired arrangement of fields, you can configure a section rule by adding layouts manually.</br> </br> Layouts</br> A layout is a container that governs the positioning of fields. Section rules generally use two types of layouts: dynamic layouts and repeating layouts.</br> </br> Dynamic layouts</br> Dynamic layouts arrange items in a flexible form, automatically adjusting to screen size. When the layout width exceeds the width of the screen, a dynamic layout responds by wrapping controls to the next line. Wrapping eliminates the need for horizontal scrolling by users viewing the form on smaller screens, such as mobile devices. Many Pega design templates are built with dynamic layouts.</br> </br> In a dynamic layout, a single item is represented as tabular data. Item arrangement can be one of two types: inline or inline-grid. The inline arrangement displays items in a row, like words in a sentence. The inline-grid arrangement displays items in a multicolumn grid. The inline-grid with one column is equivalent to a stacked format.</br> </br> Several formats of dynamic layout styles are available, including Default, Stacked, Inline, Inline-grid double, and Inline-grid triple. You can modify and create additional formats; however, changing the format automatically affects all sections using that format.</br> </br> Repeating layouts</br> When you want to display a collection of data that belongs to a page list or a page group, you use a repeating layout.</br> </br> In a repeating layout, several configurations are available including Grid layout, Tree layout, Tree Grid layout, Repeating dynamic layout, Column Repeat layout, and Tabbed Repeat layout. Data represented in a linear table is a repeating layout.</br> </br> However, a repeating dynamic layout is useful when you want to present content in a nonlinear, more aesthetic format.</br> </br> Repeating dynamic layouts help you create an interface for displaying data regardless of screen size.</br> </br> A repeating dynamic layout repeats the display of a section for each item in a list and the interface displays data that can be viewed on a tablet, monitor or smartphone.</br> </br> Controls</br> After you create the section, add controls and map the controls to specific data elements. </br> For example, to book a listing, you can add a button. To set a True/False value, you can add a check box. To enter a number, you can add a field. To set a date or time, you can add a calendar. For each control, you can configure the presentation and add an action set as appropriate. </br> </br> People expect easy, user-friendly access to applications on all their devices, such as laptops and mobile phones. To meet this expectation, Pega applications have system default responsive breakpoints that define changes in behavior on different devices. </br> </br> Responsive breakpoint configuration occurs in the application skin rule. </br> </br> The default Pega skin rule provides breakpoints for managing transitions between monitor, tablet, and mobile phone displays.</br> </br> A Responsive UI enables a layout to automatically adjust to rendering devices. Elements can move around, resize, or completely disappear based on screen resolution and size.</br> </br> Responsive breakpoints are default settings built into the application skin rule. They manage the content transition of an application between monitor, tablet, and mobile phone displays.</br> </br> Responsive tables — also known as grids — require additional configuration. Relying on breakpoints alone for tables can result in unimportant information having prominence over more important information.</br> </br> For a table, you use responsive behavior to hide less important columns to make room for the columns with vital information. Before you configure responsive behavior for a table, determine the importance settings for each column.</br> </br> You control this behavior by setting the importance of each column in the table. In Pega, importance settings are primary, secondary, and other.</br> </br> Primary – The unique identifier for the row. Each table must have one primary column.</br> Secondary – Important information with a significant effect on usability. Omitting information in a secondary column impacts the ability of the user to complete a task.</br> Other – Information with minimal impact on usability.</br> </br> By default, the application skin defines two responsive breakpoints for tables. When the display width is lower than the first responsive breakpoint, columns with importance set to Other are omitted from the table. When the display width is lower than the second responsive breakpoint, the Primary column displays in the heading for the list item and the remaining columns display as a list.</br> </br> Pega requires that the first (left-most) column be set to primary importance. The remaining columns can be set to secondary or other importance in any order.</br> </br> Tables need responsive configuration in addition to responsive breakpoints as relying on breakpoints alone for tables can result in unimportant columns having prominence over more important columns.</br>"
  ]
}

{   "details": [     
"<p>On Hire a Candidate case, we store a data element like hiring Manager whose name is let`s say Jane</br> This data element is stored in memory on a page.</br> A page is a structure for organizing data elements in an application. </br> Some pages are created by the system to track user or session data. Other pages are created by system architects to describe a data object, such as candidate.</br> </br> During case processing, each page remains in memory in a structure known as the clipboard.</br> The clipboard is the portion of memory on the server reserved by Pega for the data generated by applications.</br> The clipboard consists of all of the pages used to track the name-value pairs that represent case and session data. </br> The clipboard receives its name because pages can be added to or removed from memory as needed to track case or session data. </br> So, when a value is assigned to a data element, the data element and its value are said to be on the clipboard.</br> </br> As you run a process, Pega sends information to the clipboard, adding or removing pages and properties from memory. Your application uses this information to populate fields on UI forms, perform calculations, and evaluate decisions.</br> </br> </br> pyWorkPage stores all the data generated while creating and processing a case. </br> pyWorkPage is a specific page on the clipboard. </br> For example, pyWorkPage stores data such as the case creation date or the case ID. </br> An embedded page with pyWorkPage stores data that describes a data type. </br> For example, if a case uses a data type named Candidate, then Candidate should be an embedded page within pyWorkPage. </br> Pega Platform writes all the properties that describe the Candidate data type — such as candidate name — to the embedded page.</br> </br> When you open a child case, the clipboard also contains the page pyWorkCover. </br> pyWorkCover contains the case data for the parent case. </br> This enables you to copy data between the parent case and the child case.</br> </br> An embedded page within pyWorkPage stores data that describes a data type.</br> </br> Why is it important to include class information when you reference data on pyWorkPage?</br> If you omit the class information, Pega cannot obtain property values from the correct page. </br> Pega does not know if the properties are valid and the rule that references the properties does not function correctly.</br> </br> Let`s say you want to populate the fullname in a data transform and you have the firstname and lastname of candidate.</br> In such case, you have to define the pyWorkPage and pyWorkPage.Candidate in pages and classes section of data transform.</br> </br> To view data that is in memory, you use the Clipboard tool.</br> Clipboard tool can be opened when you click the Clipboard icon on the Developer toolbar in Dev Studio.</br> </br> The Clipboard tool is organized into three parts: the header, the left pane, and the right pane.</br> </br> You can use the header to select the thread to view. </br> Each thread corresponds to a unique action currently managed by Pega. </br> The clipboard contains one thread dedicated to the Dev Studio environment. </br> Other threads are dedicated to open rule forms. </br> Pega assigns each open case a unique thread. </br> By assigning each case or action its own thread, Pega ensures that the data for one case or action does not affect data for another case or action.</br> </br> The left pane lists each page defined on the clipboard for the selected thread. For each page, the Clipboard tool identifies the name and class of the page. </br> If a page contains embedded pages, an expand arrow is displayed to the left of the page name. To view the embedded pages, click the expand arrow.</br> </br> Pages on the clipboard are organized into four categories:</br> </br> The User Pages category contains pages created due to user action, either directly or indirectly. </br> User pages contain data related to work being performed in the selected thread. </br> While a user processes a case, all the pages used to store data about the case are listed in the User Pages category. </br> Likewise, when a system architect configures or tests a rule, all the pages that store data used by the rule are listed in this category. </br> For example, the data you enter onto a form is stored on the user page pyWorkPage.</br> </br> The Data Pages category contains read-only data pages defined by data page rules. </br> Data pages are persistent pages in memory, used to cache data. </br> This data is often sourced from outside the application, such as from a third-party or a system of record. </br> For example, your application converts currency from one type to another, such as converting US dollars to Euros. </br> The conversion rates, which are determined by the currency markets, are cached to a data page for use by one or more users of the application.</br> </br> </br> The Linked Property Pages contains read-only pages created by linked properties, which contain information from data objects referenced by a linked property. </br> The System Pages category contains pages that describe the current user session, such as the active user and the active application. </br> For example, while a user is logged in to Pega, Pega maintains a clipboard page containing information about the user( known as OperatorID), application ( known as Application), session (known as pxRequestor).</br> </br> </br> The right pane lists all of the properties defined on the selected page, and their values. In the right pane, you view data in memory. </br> In the right pane header, there are butons to edit or refresh or do some actions like (run activity) for the selected page in left pane.</br> You can also update property values and even add new properties to the page to represent data not captured in your application. </br> This allows you to test application features that rely on data that has not been added to the case type, such as decisions and UI forms. </br> For example, in a Hire a candidate case you want to verify the email address. You need emailid for the same. </br> The application currently lacks a field in the UI to allow the candidate to provide an emailid. </br> In this situation, you can use the clipboard to set a value for the property and verify that the process executes properly for the email.</br> </br> </br> To see a current snapshot of the contents in memory, the Clipboard tool can be used.</br> As you navigate your process, refresh pages in the Clipboard tool to ensure that the Clipboard tool always displays current property values and page contents.</br> </br> While submitting data to a candidate, the candidate is properly populated or not. How to check this. This can be checked under user pages >> pyWorkPage>>Candidate.</br> </br> </br>",
"In Pega, you create data elements as you configure user views during case life cycle creation. </br> The data elements or collection of related data elements in a case type comprise the case type's data model. </br> The data model defines the case type data structure. </br> A collection of related elements is called a data type or data object.</br> </br> The Hire a Candidate case has a unique identifier, manager name, position, candidate, list of skill sets. </br> The unique identifier, manager name, position are single value data elements. </br> The candidate, list of skill sets are data objects. A data object or data type contains more than one related property element.</br> </br> Use value mode for properties with no correlation to other properties. </br> There are three value mode properties available: single value, value list, and value group.</br> </br> A single value or scalar property stores text, numbers, dates, Boolean values, and amounts.</br> </br> A value list acts as a container for an ordered list of single values. The skill sets property is an example of a value list. </br> Each skill is a single piece of information, but a clear relationship exists between the skills.</br> </br> A value group acts as a container for an unordered list of single values. </br> The candidate's contact information are defined as a value group identifying the contextual meaning of each type: email, phone or fax.</br> </br> Single Value</br> >>Date</br> >>DateTime</br> >>Decimal</br> >>Double</br> >>Identifier</br> >>Integer</br> >>Password</br> >>Text</br> >>TextEncrypted</br> >>TimeOfDay</br> >>TrueFalse</br> </br> Page</br> >>Single Page</br> >>Page Group</br> >>Page List</br> </br> Advanced</br> >>Java Object</br> >>Java Object Group</br> >>Java Object List</br> >>Java Property</br> >>Java Property List</br> >>Value Group</br> >>Value List</br> </br> If we use skillset as a value list, it would would similar to this in clipboard</br> SkillSets(value List)</br> >>SkillSets(1) Java</br> >>SkillSets(2) Python</br> </br> </br> If we use candidate as a Page, it would would similar to this in clipboard</br> Candidate(Page)</br> >>Name - John</br> >>SkillSets</br> >>Addresses</br> </br> Addresses (Page Group)</br> >>Address Line 1</br> >>Address Line 2</br> >>City</br> >>State</br> >>Country</br> >>PreferredCommunications</br> </br> SourceCandidates(Page List)</br> >>Candidate</br> </br> PreferredCommunications (Value Group)</br> >>PreferredCommunications(Phone)</br> >>PreferredCommunications(Fax)</br> >>PreferredCommunications(Email)</br> </br> The page mode properties require you to specify a definition, or a data type, that defines the structure of the page property.</br> </br> Pega provides easy-to-use interfaces that add, update and remove classes and properties on the Data Model tab in the Case Designer and the property rule form.</br>  The Data model tab You can use the Data model tab in the Case Designer to add or remove properties from your case type. Properties are called fields in the Data model tab.  Selecting the field type When creating a new field, you need to specify a type. The options in the list pair the field with a control in the user interface. The type options are divided into three categories: simple, fancy, and complex.  The simple types are similar to the property types defined on the property itself. Use a picklist if you need to display a static list of options to the user. For example, if you want to capture a phone number, you might want to specify a list of types, such as home, work, and mobile.  Simple >>Text(single line) >>Text(paragraph) >>Boolean >>Currency >>Date & Time >>Date Only >>Decimal >>Email >>Integer >>Phone >>Picklist >>Time only  The fancy types provide the capability to upload an attachment, show a location on a map, or reference a user on the system.  Fancy >>Attachment >>Location >>User reference  Use the complex types to define page and page list properties. A field group is a page and a field group (list) is a page list.  Complex types >>Field group >>Field group (list) >>Data Reference   A property is a rule, it shares the benefits of versioning, inheritance, and access control that the provides to all rules. The property type cannot be changed after the property has been saved.  In General>>Data Access section, you can configure the persistence settings. Use Manual if you are explicitly setting the value (for example, in a user interface).  The General>>Display and validation section allows you to define how the property should appear on the screen by specifying a UI control. This section also allow to configure the table type with valid valies.  Pega provided standard properties have names that start with px, py, or pz. You cannot create new properties starting with px, py, or pz.  The table below provides a list of the prefixes for standard rules.  Prefix	Meaning px	Identifies special properties — your application can read but not write to these properties. py	You can use these properties in your application. pz	Supports internal system processing — the meaning of values may change with new product releases. Your application can read but not write to these properties.    Property can be referenced in different rules like section, data transform, activity, report etc. Let`s say we want to reference Fullname property of Candidate page property. We can refer this in a rule (let`s say a data transform belongs to Hire a candidate Work class) by .Candidate.Fullname  If you want to refer the unique identifier (pzInsKey or pyID) of Hire a Candidate class, you can refer it by .pzInsKey or .pyID  To refer a skillsets value list property, you may refer it by .SkillSets(1) To refer a PreferredCommunications value group property, you may refer it by .PreferredCommunications(Email), .PreferredCommunications(Phone)   If you want to refer a page list property such as SourceCandidates, you have to refer it .SourceCandidates(1)   To refer to a specific property on the page, use the name of the page as a prefix for the property name. By doing this, you establish an important piece of information about that property — its context. The context of a page — by itself or as part of a page list or page group — acts as a container for the properties it contains.  <strong>Adding a field to a case or data type</strong> Follow these steps to add a field:  >>Open the Data model tab in the Case Type Explorer. >>Click the + Add field. >>Specify a name for the field (property). >>The ID field is automatically populated by the system. You can choose to edit the ID field. >>Select the type. >>If you select a field group or field group list, you need to provide a data type in the options field.  <strong>Updating a field in the case or data type</strong> >>Click the row to update the name of a field.  <strong>Remove a field from the case or data type</strong> >>Click the trash can icon to remove a field.  <strong>User Views</strong>  User views are required for process to take care of any manual intervention by the user. User may enter/update/remove/review the data elements through the user views. Any such requirement helps the System architects to identify the user view.  In Hire a Candidate case, the first view is where the Hiring Manager need to submit the information about the position, skillsets and location of hiring postion. Hiring Manager is a user who uses an user view for doing this.  Before you create a view, ask the following questions:  What fields do users need to see? >>How will users enter values in those fields? >>Can users modify the field values or only read the values? >>Record the values users enter in a specification.  <strong>Configure a user view using App Studio</strong> To configure a user view using App Studio: >>In the Navigation panel on the left, click Case types to view a list of current case types.  >>From the list of available case types, select the case type for which you want to configure a user view.  >>Select the step for which you want to configure a user view to display the Contextual Properties panel for that step. The Contextual Properties panel displays to the right of the case life cycle.  >>In the Contextual Properties panel, click Configure view. The Views configuration page displays.  <strong>Add default fields to the user view</strong> To view the default fields and select fields to add to the user view:  >>In the left panel, select Fields to view the default data elements.  >>If you require any of the default fields, select the row for the field, and then click the plus sign to the right of the field name.  >>Repeat steps 1 and 2 to add more default fields.  <strong>Add new fields to the user view</strong> To add new fields to the user view:  >>In the Field field, type a name for the new field. The following image shows a new Loan types field.  >>>>After you add the required data elements and save your view, the system adds new data elements to your application. You can then reuse those data elements when you create new views.  >>Use the Tab key to move to the second field on the row.  >>From the pick list, select a type for the data element. The type defines how users enter a value in the UI field.  >>>>For example, if you want the user to select a type of loan from a drop-down list in the Loan types UI field, select Picklist from the drop-down in the Type field as shown in the following image.    >>>>The Picklist data type has an additional field for you to choose the type of list (drop-down list or radio buttons) and the names of the items on the list. To learn how to choose the type of list and to configure the item names, see the steps under Designing a picklist.  >>Use the Tab key to move to the third field. Select either Optional or Required if you want to allow users to enter a value in a field. If you do not want users to enter or update the field value, select Read-only. In the following example, the developer is selecting Required to ensure the user selects a value from the Loan Types list.  >>To add more fields, click + Add field beneath the bottom row.  <strong>Save and verify your work </strong> To save your work and review the view:  >>On the bottom right corner of the View configuration page, click Submit. When you click Submit, the system saves your updates and creates the view that users see when they work on an assignment. The system also saves the data elements that you can reuse in the application.  >>Click Save to save your changes to the case type.  >>In the upper right corner, click Run to run the application. The new fields in the standard Create view display.  >>Verify that the fields you selected and created appear in the user view.  <strong>Designing a picklist</strong> If you select the picklist data type, you need to use an additional field to choose how to display the list and the names of the items you want to include on the list. To design the list, do the following:  >>From the end of the row containing the picklist data type, click the Gear icon.  >>In the Display As field, select one of the following: >>>>Drop-down list if you want users to select an item from a drop-down list. >>>>Radio buttons if you want users to select an item by clicking a radio button.   >>Under List Choices, enter the name of the first list item. >>Click + Add choice to add more fields for items in the list. The following example shows list choices for loan types.   >>Click Submit in the dialog box to save your list. The items you entered in the List Choices column display in the Loan Types drop-down list in the user view.            ",
"<p>P.S.: If you want any improvement upon this, please submit a feedback by sending a mail to ipega.learning@gmail.com	"
] } 

{
  "details": [
    "<p>On Hire a Candidate case, we store a data element like hiring Manager whose name is let`s say Jane</br>
This data element is stored in memory on a page.</br>
A page is a structure for organizing data elements in an application. </br>
Some pages are created by the system to track user or session data. Other pages are created by system architects to describe a data object, such as candidate.</br>
</br>
During case processing, each page remains in memory in a structure known as the clipboard.</br>
The clipboard is the portion of memory on the server reserved by Pega for the data generated by applications.</br>
The clipboard consists of all of the pages used to track the name-value pairs that represent case and session data. </br>
The clipboard receives its name because pages can be added to or removed from memory as needed to track case or session data. </br>
So, when a value is assigned to a data element, the data element and its value are said to be on the clipboard.</br>
</br>
As you run a process, Pega sends information to the clipboard, adding or removing pages and properties from memory. 
Your application uses this information to populate fields on UI forms, perform calculations, and evaluate decisions.</br>
</br>
</br>
pyWorkPage stores all the data generated while creating and processing a case. </br>
pyWorkPage is a specific page on the clipboard. </br>
For example, pyWorkPage stores data such as the case creation date or the case ID. </br>
An embedded page with pyWorkPage stores data that describes a data type. </br>
For example, if a case uses a data type named Candidate, then Candidate should be an embedded page within pyWorkPage. </br>
Pega Platform writes all the properties that describe the Candidate data type — such as candidate name — to the embedded page.</br>
</br>
When you open a child case, the clipboard also contains the page pyWorkCover. </br>
pyWorkCover contains the case data for the parent case. </br>
This enables you to copy data between the parent case and the child case.</br>
</br>
An embedded page within pyWorkPage stores data that describes a data type.</br>
</br>
Why is it important to include class information when you reference data on pyWorkPage?</br>
If you omit the class information, Pega cannot obtain property values from the correct page. </br>
Pega does not know if the properties are valid and the rule that references the properties does not function correctly.</br>
</br>
Let`s say you want to populate the fullname in a data transform and you have the firstname and lastname of candidate.</br>
In such case, you have to define the pyWorkPage and pyWorkPage.Candidate in pages and classes section of data transform.</br>
</br>
To view data that is in memory, you use the Clipboard tool.</br>
Clipboard tool can be opened when you click the Clipboard icon on the Developer toolbar in Dev Studio.</br>
</br>
The Clipboard tool is organized into three parts: the header, the left pane, and the right pane.</br>
</br>
You can use the header to select the thread to view. </br>
Each thread corresponds to a unique action currently managed by Pega. </br>
The clipboard contains one thread dedicated to the Dev Studio environment. </br>
Other threads are dedicated to open rule forms. </br>
Pega assigns each open case a unique thread. </br>
By assigning each case or action its own thread, Pega ensures that the data for one case or action does not affect data for another case or action.</br>
</br>
The left pane lists each page defined on the clipboard for the selected thread. For each page, the Clipboard tool identifies the name and class of the page. </br>
If a page contains embedded pages, an expand arrow is displayed to the left of the page name. To view the embedded pages, click the expand arrow.</br>
</br>
Pages on the clipboard are organized into four categories:</br>
</br>
The User Pages category contains pages created due to user action, either directly or indirectly. </br>
User pages contain data related to work being performed in the selected thread. </br>
While a user processes a case, all the pages used to store data about the case are listed in the User Pages category. </br>
Likewise, when a system architect configures or tests a rule, all the pages that store data used by the rule are listed in this category. </br>
For example, the data you enter onto a form is stored on the user page pyWorkPage.</br>
</br>
The Data Pages category contains read-only data pages defined by data page rules. </br>
Data pages are persistent pages in memory, used to cache data. </br>
This data is often sourced from outside the application, such as from a third-party or a system of record. </br>
For example, your application converts currency from one type to another, such as converting US dollars to Euros. </br>
The conversion rates, which are determined by the currency markets, are cached to a data page for use by one or more users of the application.</br>
</br>
</br>
The Linked Property Pages contains read-only pages created by linked properties, which contain information from data objects referenced by a linked property. </br>
The System Pages category contains pages that describe the current user session, such as the active user and the active application. </br>
For example, while a user is logged in to Pega, Pega maintains a clipboard page containing information about the user( known as OperatorID), application ( known as Application), session (known as pxRequestor).</br>
</br>
</br>
The right pane lists all of the properties defined on the selected page, and their values. In the right pane, you view data in memory. </br>
In the right pane header, there are butons to edit or refresh or do some actions like (run activity) for the selected page in left pane.</br>
You can also update property values and even add new properties to the page to represent data not captured in your application. </br>
This allows you to test application features that rely on data that has not been added to the case type, such as decisions and UI forms. </br>
For example, in a Hire a candidate case you want to verify the email address. You need emailid for the same. </br>
The application currently lacks a field in the UI to allow the candidate to provide an emailid. </br>
In this situation, you can use the clipboard to set a value for the property and verify that the process executes properly for the email.</br>
</br>
</br>
To see a current snapshot of the contents in memory, the Clipboard tool can be used.</br>
As you navigate your process, refresh pages in the Clipboard tool to ensure that the Clipboard tool always displays current property values and page contents.</br>
</br>
While submitting data to a candidate, the candidate is properly populated or not. How to check this. This can be checked under user pages >> pyWorkPage>>Candidate.</br>
</br>
</br>
P.S.: If you want any improvement upon this, please submit a feedback by sending a mail to ipega.learning@gmail.com	"
  ]
}
